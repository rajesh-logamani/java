Synchronization Notes:

Problem Situation:
1. Critical sections in multi-threaded applications can lead to
   - Data corruption if multiple threads access shared resources simultaneously.
   - Inconsistent state of shared data if not properly synchronized.
2.  Race conditions, deadlocks, and inconsistent data if not managed properly.
3. Pre-emptive in thread scheduling can cause threads to be interrupted at any time (because of context switching),

Solution to handle synchronization:
1. Removing Race Conditions:
   - Use locks (mutexes) to ensure that only one thread can access a shared resource at a time.
   - Use atomic variables for simple operations that need to be thread-safe without locks.
2. Synchronized blocks and methods:
   - Use synchronized blocks to ensure that only one thread can execute a block of code at a time.
   - Use synchronized methods to ensure that only one thread can execute a method at a time.
